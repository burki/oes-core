<?php
/*
 * This file is part of OES, the Open Encyclopedia System.
 *
 * Copyright (C) 2020 Freie Universität Berlin, Center für Digitale Systeme an der Universitätsbibliothek
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
?>

<?php

class Oes_Modalist_App extends Oes_Mini_App
{

    var $isOpenModal = 0;

    var $openLayers = [];

    var $wizardScreen;

    function doInitState()
    {
        parent::doInitState();
        $this->isOpenModal = $this->state->isOpenModal;
        $this->openLayers = $this->state->openLayers;
    }

    function doBuildModel()
    {

        parent::doBuildModel();

        $this->state->isOpenModal = $this->isOpenModal;
        $this->state->openLayers = $this->openLayers;
        $this->model->wizardScreen = $this->wizardScreen;

        if ($this->isOpenModal!=1) {
            $this->areas_redraw('close-modal');
        }

    }

    //

    function showWizardDialogWithClass($screen, $class, $layer = 2)
    {
        $this->showWizardDialog($screen, $layer, $class);
    }


    function showWizardDialog($screen, $layer = 2, $class = '')
    {
        $this->closeDialog();
        $this->openLayer($layer);
        $this->wizardScreen = $screen;
        $this->areas_redraw("wizard-dialog-$layer");
    }

    function showWarningDialog($msg)
    {
        $this->model->warningMessage = $msg;
        $this->openLayer(3);
        $this->areas_redraw("warning-dialog");
    }


    function openModal($force = false)
    {

        if ($this->isOpenModal && !$force) {
            return;
        }

        $this->isOpenModal = 1;

        $this->areas_redraw('base');
        
    }

    function openLayer($layer)
    {

        if ($this->openLayers[$layer]==1) {
            return;
        }

        $this->openLayers[$layer]=1;

        $this->openModal();

    }

    function closeDialog($layer = 3)
    {
        $this->closeLayer(3);
    }

    function closeWizard($layer = 2)
    {
        $this->closeLayer($layer);
    }

    function action_close_layer($params = [])
    {
        $layer = $params['layer'];
        $this->closeLayer($layer);
    }

    function action_close_dialog()
    {
        $this->closeDialog();
    }

    function closeLayer($layer)
    {
        unset($this->openLayers[$layer]);
        $this->areas_redraw('close-layer-'.$layer);
        $this->closeModal();
    }

    function closeModal()
    {
        if (empty($this->openLayers)) {
            $this->isOpenModal = 0;
        }
    }

}

class Oes_CrudManager_App 
{

    function action_init($params = [])
    {
        parent::action_init($params); // TODO: Change the autogenerated stub

        $this->buildFormsList();

    }

    function buildFormsList()
    {
        $this->model->forms_list = $this->cnfGetAsArray('actions');
        $this->areas_redraw('forms_list');
    }

    function action_form_action($params = [])
    {
        $list = $params['list'];
        $item = $params['item'];
        $action = $params['action'];
    }

    function action_list($params = [])
    {

        $action = $params['action'];

        if (empty($action)) {
            $params['action'] = 'init';
        }

        $this->action_list_op($params);

    }

    /**
     * called by:
     *  - action_list
     *
     * @param array $params
     * @return mixed
     */
    function init_list($id, $params = [])
    {
        $this->model->list = $this->getListConfig($id);

        $this->areas_redraw('right_list');

        return $this->model->list;

    }

    function action_form($params = [])
    {
        $action = $params['action'];

        if (empty($action)) {
            $params['action'] = 'init';
        }

        $this->action_item_op($params);
    }

    function load_form($form, $item = null, $params = [])
    {

        $manager = $this->getFormConfig($form);

        $manager->setItem($item);

        $this->areas_redraw('right_form');

    }

    function getListConfig($list)
    {

        $lists = $this->cnfGetAsArray("lists");

        $config = x_lookup_entry_in_array($lists, $list);

        $obj = new CrudMListOperations($list, $config);

        $obj->setApp($this);

        return $obj;

    }

    function getFormConfig($id)
    {

        $forms = $this->cnfGetAsArray("forms");

        $config = x_lookup_entry_in_array($forms, $id);

        $obj = new CrudMListOperations($id, $config);

        $obj->setApp($this);

        return $obj;

    }

    function action_list_op($params = [])
    {

        $action = $params['action'];

        $list = $params['list'];

        $op_params = $params['params'];

        $mgr = $this->init_list($list);

        if ($action) {
            $manager->{$action}($op_params);
        }

    }

    function action_item_op($params = [])
    {

        $action = $params['action'];

        $form = $params['form'];

        $id = $params['id'];

        $op_params = x_as_array($params['params']);

        $manager = $this->getFormConfig($id);

        if (!empty($action)) {
            $manager->{$action}($id, $op_params);
        }

    }

    function doPageCall()
    {
        parent::doPageCall();
    }

    function openModal()
    {
        $this->areas_redraw('base');
    }


}

class CrudMOperation
{

}

